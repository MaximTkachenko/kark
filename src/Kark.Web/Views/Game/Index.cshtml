
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery-3.1.1.min.js")"></script>
    <!-- latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <!-- optional theme -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">
    <!-- latest compiled and minified JavaScript -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/vendor/phaser-2.4.8.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.signalR-2.2.1.min.js")"></script>
    <script type="text/javascript" src="/signalr/hubs"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/app/errors.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/app/metadata.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/app/globalConstants.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/app/metadataCalculator.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/app/utils.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/app/phaserSpriteExtension.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/app/tileObjectsService.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/app/tileQueueService.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/app/playerService.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/app/main.js")"></script>
    <!-- reactjs stuff -->
    <script type="text/javascript" src="https://fb.me/react-15.0.0.js"></script>
    <script type="text/javascript" src="https://fb.me/react-dom-15.0.0.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js"></script>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            background-color: #3F4045;
        }

        #mode-selector {
            color: #ffffff;
            text-align: center;
            margin-left: auto;
            margin-right: auto;
            display: table;
            width: 700px;
            height: 100%;
            z-index: 100;
        }

        #mode-selector-inner {
            display: table-cell;
            vertical-align: middle;
        }

        #game-info {
            position: absolute; 
            top: 0; 
            right: 0; 
            height: 100%; 
            width: 15%; 
            background-color: white;
            border: 4px #3F4045 solid;
            padding: 2px;
        }

        .player-details {
            padding: 3px;
            border-bottom: 1px solid #D2D8DB;
        }

        .player-details__current {
            background-color: #D2D8DB;
        }

        .feedback-link-container {
            position: absolute;
            bottom: 0;
            right: 0;
            padding: 3px;
        }

        * {
            border-radius: 0 !important;
        }
    </style>
    <title>kark</title>
</head>
<body>
<div id="mode-selector">
    <div id="mode-selector-inner">
        <h1>New game</h1>
        <div class="row">
            <div class="col-md-6">
                <h2>Local</h2>
                <form class="form-inline">
                    <div class="form-group">
                        <label for="local-game-tiles-set">Tiles</label>
                        <select id="local-game-tiles-set" class="form-control">
                            <option value="1">x 1</option>
                            <option value="2">x 2</option>
                            <option value="3">x 3</option>
                            <option value="4">x 4</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="local-game-users-number">Users</label>
                        <select id="local-game-users-number" class="form-control">
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4</option>
                        </select>
                    </div>
                    <button type="button" class="btn btn-primary" id="local-game-start-btn">Start!</button>
                </form>
            </div>
            <div class="col-md-6">
                <h2>Network (not ready yet)</h2>
                <form class="form-inline">
                    <div class="form-group">
                        <label for="network-game-tiles-set">Tiles</label>
                        <select id="network-game-tiles-set" class="form-control" disabled="disabled">
                            <option value="1">x 1</option>
                            <option value="2">x 2</option>
                            <option value="3">x 3</option>
                            <option value="4">x 4</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary" disabled="disabled">Start!</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div id="game-container" style="overflow: hidden;"></div>
<div id="game-info" class="hidden">
    <div id="players"></div>
    <div id="chat"></div>
    <div class="feedback-link-container"> If you found a bug or have an idea how to improve the game please 
        <a href="javascript:void(0)" data-toggle="modal" data-target="#feedback-dialog">send feedback</a>
    </div>
    <!-- game over popup -->
    <div class="modal fade" id="game-over-dialog" tabindex="-1" role="dialog" aria-labelledby="game-over-dialog-label">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="game-over-dialog-label">Finish</h4>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Got it!</button>
                </div>
            </div>
        </div>
    </div>
    <!-- feedback dialog -->
    <div class="modal fade" id="feedback-dialog" tabindex="-1" role="dialog" aria-labelledby="feedback-dialog-label">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="feedback-dialog-label">Feedback</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="submitter-email">Your email address</label>
                        <input type="email" class="form-control" id="submitter-email"/>
                    </div>
                    <div class="form-group">
                        <label for="feedback-text">Feedback about game</label>
                        <textarea id="feedback-text" class="form-control"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" id="post-feedback" class="btn btn-primary" data-dismiss="modal">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    var players = new playerService();
    var objectsStore = tileObjectsService();
</script>
<script type="text/babel">
    var Player = React.createClass({
        render: function() {
            var playerClasses = ["player-details"];
            if(this.props.current){
                playerClasses.push("player-details__current");
            }            
            var playerClassFinal = playerClasses.join(" ");
    
            var nameStyle = { color: this.props.color };

            return (
                <div className={playerClassFinal} id={this.props.name}>
                    <div><label style={nameStyle}>{this.props.name}</label></div>
                    <div>score:  {this.props.score}</div>
                    <div>flags: {this.props.availableFlags}</div>
                </div>);
        }
    });

    var PlayersList = React.createClass({
        getInitialState: function(){
            players.registerChangeListener(this.updateState);
            return { players: players.getPlayers() }; 
        },
        updateState: function(){
            this.setState({ players: players.getPlayers() });
        },
        render: function(){
            return (<div>
                {this.state.players.map(function(player){
                    return <Player key={player.name} {...player}/>
                })}
            </div>);
        }
    });
    
    var ChatMessage = React.createClass({
        render: function(){
            return (
                <div>{this.props.author}:  {this.props.message}</div>);
        }
    });
    
    var Chat = React.createClass({    
        getInitialState: function(){
            //this.state.ChatHub.client.pushNewMessage = this.pushNewMessage;
            return { messages: [{id:1, author: "author", message: "test message"}] };
        },
        pushMessage: function(message){
            var messagesCopy = this.state.messages.slice();
            messagesCopy.push(message);
            this.setState({ messages: messagesCopy });
        },
        sendMessage: function(e){
            var text = document.getElementById("message-input");
            if(!text || !text.value){
                return;
            }
            var id = this.state.messages[this.state.messages.length - 1].id + 1;
            var message = {id:id, author: "author", message: text.value};
            this.pushMessage(message);

            text.value = "";
        },
        render: function(){
            var style = { height: "60%" };
            return (
        <div>
            <div style={style}>
                {this.state.messages.map(function(message){
                return <ChatMessage key={message.id} {...message} />
                })}
            </div>
            <div>
                <form className="form-inline">
                    <div className="form-group">
                        <div className="input-group">
                            <input type="text" className="form-control" id="message-input" placeholder="Message" />
                        </div>
                    </div>
                    <input type="button" className="btn btn-primary" onClick={this.sendMessage} value="Send" />
                </form>
            </div>
        </div>);
        }
    });    
    
    $(document).ready(function(){
        $("#post-feedback").click(function(){
            $.post("@Url.Action("Feedback")", {SubmitterEmail: $("#submitter-email").val(), Text: $("#feedback-text").val()});
        });

        $('#local-game-start-btn').click(function(){
            var usersNumber = parseInt($('#local-game-users-number').val());
            var tilesSetNumber = parseInt($('#local-game-tiles-set').val());
    
            var flagsStartNumber = 8;
            var defaultUsers = [{name: "Frodo Baggins", color: "#FF333C", hexColor: 0xFF333C, availableFlags: flagsStartNumber, score: 0},
                {name: "Gandalf the Grey", color: "#3933FF", hexColor: 0x3933FF, availableFlags: flagsStartNumber, score: 0},
                {name: "Aragorn", color: "#010106", hexColor: 0x010106, availableFlags: flagsStartNumber, score: 0},
                {name: "Sauron", color: "#006600", hexColor: 0x006600, availableFlags: flagsStartNumber, score: 0}
            ];

            for (var i = 0, imax = usersNumber; i < imax; i++){
                players.add(defaultUsers[i]);
            }
            
            var game = new KarkGame(players, objectsStore, new GameDragger(), tilesMetadata, tileQueueService(tilesMetadata, tilesSetNumber), Phaser);
            ReactDOM.render(<PlayersList />, document.getElementById("players") );
            //ReactDOM.render(<Chat />, document.getElementById("chat") );
            
            $('#mode-selector').remove();
            $("#game-info").removeClass("hidden");
        });
    
        $(document).on("game.over", function(e, data) {
            $("#game-over-dialog").modal().find(".modal-body").text("WINNERS: " + data.winners.map(function(w){return w.name;}).join(", ") + "!");
        });
    });

</script>
</body>
</html>
